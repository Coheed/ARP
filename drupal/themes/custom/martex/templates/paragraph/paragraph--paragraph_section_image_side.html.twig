{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{% set img_pos = paragraph.field_paragraph_image_side_pos.value|render|trim|default('left') %}
{% set img_url = file_url(content.field_paragraph_image['#items'].entity.uri.value) %}
{%
  set classes = [
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
	  paragraph.field_paragraph_extra_class.value|render|trim,
	  'bg-gray position-relative min-vh-60 d-lg-flex align-items-center',
	  view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
  ]
%}

{% block paragraph %}
  <section{{ attributes.addClass(classes) }} {% if paragraph.field_paragraph_id.value|render|trim %} id="{{ paragraph.field_paragraph_id.value|render|trim }}"  {% endif %}  >
  {% if img_pos == 'left' %}
	  <div class="col-lg-6 position-lg-absolute top-0 start-0 image-wrapper bg-image bg-cover h-100" data-image-src="{{ img_url }}">      
    </div>
  {% else %}
    <div class="col-lg-6 position-lg-absolute top-0 end-0 image-wrapper bg-image bg-cover h-100" data-image-src="{{ img_url }}">      
    </div>
	{% endif %}
    <div class="{{ container }}">
      <div class="row gx-0">
        <div class="col-lg-6 {% if img_pos == 'left' %} ms-auto {% endif %}">
          {% block content %}	
            {{ content|without('field_paragraph_extra_class','field_paragraph_image','field_paragraph_image_side_pos','field_paragraph_id') }}
          {% endblock %}
		    </div>
      </div>
	  </div>
  </section>
{% endblock paragraph %}
