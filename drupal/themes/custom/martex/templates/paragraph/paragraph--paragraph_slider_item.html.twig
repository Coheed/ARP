{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{% set img = content.field_paragraph_image['#items'].entity.uri.value %}
{% if img is not null %}
	{% set img_url = file_url(img) %}
{% else %}
	{% set img_url ='/' %}
{% endif %}
{%
  set classes = [
    'swiper-slide',
    paragraph.field_paragraph_extra_class.value|render|trim,
    paragraph.field_paragraph_set_bg.value|render|trim ? 'bg-image'
  ]
%}
<div{{ attributes.addClass(classes) }} {% if paragraph.field_paragraph_set_bg.value|render|trim %} data-image-src="{{ img_url }}" {% endif %}>
  {% if paragraph.field_paragraph_content.value|render|trim %}    
    {{ content|without('field_paragraph_extra_class','field_paragraph_image','field_paragraph_set_bg') }}
  {% else %}
    {% if img_url != '/' and not paragraph.field_paragraph_set_bg.value|render|trim %}
       <img alt="image" src="{{ img_url }}" />
    {% endif %}
  {% endif %}
</div>
